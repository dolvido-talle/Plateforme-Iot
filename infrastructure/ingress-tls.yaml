---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plateform-iot-ingress
  annotations:
    # Indique au cluster quel Ingress controller doit gérer cette ressource.
    kubernetes.io/ingress.class: "nginx"
    # Indique à cert-manager d'utiliser le ClusterIssuer de production nommé "letsencrypt-prod".
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Forcer la redirection HTTP -> HTTPS côté nginx-ingress.
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Indique que le backend parle HTTP (utile si le controller doit adapter le proxy)
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # Autoriser le challenge ACME HTTP-01
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "off"
spec:
  ingressClassName: nginx
  # Configuration TLS
  tls:
    - hosts:
        - 4.178.187.0.nip.io
      secretName: plateform-iot-tls
  rules:
    - host: 4.178.187.0.nip.io
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: backend-service
                port:
                  number: 8000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80

---
# ClusterIssuer production Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: talletoun@3il.fr
    privateKeySecretRef:
      name: letsencrypt-prod-account-key
    solvers:
      - http01:
          ingress:
            class: nginx
