# The Docker image that will be used to build your app
image: node:lts


stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

before_script:
  - npm cache clean --force # Nettoyer le cache npm avant l'installation des dépendances

build-job: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - ls -la frontend # Si package.json est dans le dossier 'frontend', vérifiez là
    - cd frontend
    - npm install --legacy-peer-deps
    - npm run build
    - mv build public
  artifacts:
    paths:
      - public

unit-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

cypress-test:
  stage: test
  image: cypress/browsers
  script:
    - cd frontend
    - npm install
    - npm ci
    - npm config list
    - npx cypress run --browser chrome
  artifacts:
    when: always
    paths:
      - frontend/cypress/videos/**/*.mp4
      - frontend/cypress/screenshots/**/*.png
    expire_in: 1 days



deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
